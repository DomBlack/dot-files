---

- name: ensure the powerline folder is owned by me
  file:
    path: ~/.config/powerline
    state: directory
    owner: "{{ ansible_user_id }}"
    mode: 0775

- name: check to see if pip is already installed.
  command: "pip --version"
  ignore_errors: true
  changed_when: false # read-only task
  check_mode: no
  register: pip_is_installed

- name: ensure pip is installed
  easy_install:
    name: pip
    state: present
  when: pip_is_installed.rc != 0

- name: check if powerline is locally installed
  stat:
    path: "{{ ansible_env.HOME }}/.local/bin/powerline"
  changed_when: false # read-only task
  check_mode: no
  register: powerline_installed
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: ensure powerline is installed
  pip:
    name: powerline-status
    extra_args: '--ignore-installed --upgrade --user' # upgrade/ignore-installed forces it always into the user directory
    state: present
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and powerline_installed.stat.exists == False

- name: check if powerline is locally installed (MacOS)
  stat:
    path: "{{ ansible_env.HOME }}/Library/Python/2.7/bin/powerline"
  changed_when: false # read-only task
  check_mode: no
  register: powerline_installed
  when: ansible_distribution == 'MacOSX'

- name: ensure powerline is installed
  pip:
    name: powerline-status
    extra_args: '--ignore-installed --upgrade --user' # upgrade/ignore-installed forces it always into the user directory
    state: present
  when: ansible_distribution == 'MacOSX' and powerline_installed.stat.exists == False

- name: check if argparse is locally installed
  stat:
    path: "{{ ansible_env.HOME }}/.local/lib/python2.6/site-packages/argparse.py"
  changed_when: false # read-only task
  check_mode: no
  register: argparse_installed
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: ensure powerline dependancy argparse is installed
  pip:
    name: "argparse"
    extra_args: '--ignore-installed --upgrade --user'
    state: present
  when: (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux' or ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and argparse_installed.stat.exists == False

- name: ensure the powerline config file is present
  copy:
    src: powerline-config.json
    dest: "{{ ansible_env.HOME }}/.config/powerline/config.json"
    owner: "{{ ansible_user_id }}"
    mode: 0664

- name: Set powerline bindings path for MacOS
  set_fact:
    powerline_bindings_path: ~/Library/Python/2.7/lib/python/site-packages/powerline/bindings
  when: ansible_distribution == 'MacOSX'